/*
	Struct with the fields arranged to waste memory, was it a plain C struct being
	compiled with 8-byte alignment.

	This demonstrates that the Coral compiler ignores the order in which the fields
	were declared, and sorts them by descreasing order of field size (or a rough estimate)
	to decrease memory waste.
 */
struct BadlySortedStruct
{
    int8 myInt8;		// 7 bytes of padding
    double myDouble;
    int16 myInt16;		// 2 bytes of padding
    TestEnum myEnum;
    bool myBool;        // 3 bytes of padding
    int32 myInt32;

    // without rearranging the fields, and with 8-byte alingment, this struct
    // would take 32 bytes (12 bytes of padding); sorting would reduce its size to 20 bytes.
};
